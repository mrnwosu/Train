// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("POSTGRES_PRISMA_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String           @id @default(cuid())
    name                String?
    email               String?          @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    role                Role             @default(CLIENT)
    workouts            Workout[]
    AssignedWorkoutMaps WorkoutUserMap[] @relation("trainer")
    GivenWorkoutMaps    WorkoutUserMap[] @relation("client")
}

enum Role {
    TRAINER
    CLIENT
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Movement {
    id                                     Int       @id @default(autoincrement())
    categoryName                           String
    targetMuscleGroups                     String
    movementName                           String
    canHiit                                Boolean
    literalMusclesAffected                 String[]
    literalMusclesAffectedCommonNames      String[]
    averageCaloriesBurntAfterThirtySeconds Int
    Workouts                               Workout[]
}

model Workout {
    id                 Int              @id @default(autoincrement())
    workoutName        String
    movements          Movement[]
    sets               Int
    secondsBetweenSets Int?
    secondsDuringReps  Int?
    creatorUserId      String
    creator            User             @relation(fields: [creatorUserId], references: [id])
    WorkoutUserMap     WorkoutUserMap[]
    notes              String?
}

model WorkoutUserMap {
    id                  Int      @id @default(autoincrement())
    workoutId           Int
    workout             Workout  @relation(fields: [workoutId], references: [id])
    assignedByTrainerId String
    assignedByTrainer   User     @relation("trainer", fields: [assignedByTrainerId], references: [id])
    clientId            String
    client              User     @relation("client", fields: [clientId], references: [id])
    notes               String?
    dayOfWeek           Int
}

